import colorsRaw from 'material-colors'
import { writeFileSync } from 'node:fs'

const flatColors: Record<string, string> = {}

Object.entries(colorsRaw).forEach(([colorName, shades]) => {
  if (typeof shades === 'object') {
    Object.entries(shades as object).forEach(([shade, value]) => {
      // Only use numeric shades, skip non-numeric (like "A100") if you want or keep all keys
      if (!Number.isNaN(Number(shade))) {
        const key = `${colorName}-${shade}`
        flatColors[key] = value as string
      }
    })
  } else if (typeof shades === 'string') {
    flatColors[colorName] = shades
  }
})

const colorNames: string[] = Object.keys(flatColors).reduce((result: string[], current) => {
  const color = current.split('-')[0]

  if (result.includes(color)) {
    return result
  }

  result.push(color)

  return result
}, [])

const tsContent = `/**
 * --------------------------------------------------------------------
 * THIS FILE IS AUTO-GENERATED — DO NOT EDIT IT DIRECTLY!
 *
 * This file was generated by the colors/generate-ts script.
 * Any manual changes will be overwritten.
 * --------------------------------------------------------------------
 */

/**
 * colors array for all possible colors
*/
export const colors = \n${JSON.stringify(colorNames, null, 2)}

/**
 * type that define all colors available for components
*/
export type Color = typeof colors[number]

/**
 * object of all possible color values
*/
export const colorsFlat = ${JSON.stringify(flatColors, null, 2)}
`

writeFileSync('src/assets/typescript/colors.ts', tsContent)

console.log('✅ colors.ts generated with union type Color')
